name: Deploy OpenAI AgentToolkit

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/agent-toolkit/**'
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: chatbot-agent-toolkit
  LAMBDA_FUNCTION_NAME: chatbot-agent-toolkit

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend/agent-toolkit
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Create IAM role for Lambda
      run: |
        ROLE_NAME="chatbot-agent-toolkit-role"
        
        # Check if role exists
        if ! aws iam get-role --role-name $ROLE_NAME &> /dev/null; then
          echo "Creating IAM role: $ROLE_NAME"
          
          # Create trust policy
          cat > trust-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
        EOF
          
          # Create role
          aws iam create-role \
            --role-name $ROLE_NAME \
            --assume-role-policy-document file://trust-policy.json
          
          # Attach basic execution policy
          aws iam attach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
          # Create custom policy
          cat > lambda-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject",
                        "s3:ListBucket"
                    ],
                    "Resource": [
                        "arn:aws:s3:::chatbot-documents-ap-south-1",
                        "arn:aws:s3:::chatbot-documents-ap-south-1/*",
                        "arn:aws:s3:::chatbot-embeddings-ap-south-1",
                        "arn:aws:s3:::chatbot-embeddings-ap-south-1/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:Query",
                        "dynamodb:Scan"
                    ],
                    "Resource": [
                        "arn:aws:dynamodb:$AWS_REGION:*:table/chatbot-knowledge-base",
                        "arn:aws:dynamodb:$AWS_REGION:*:table/chatbot-knowledge-base-metadata",
                        "arn:aws:dynamodb:$AWS_REGION:*:table/chatbot-conversations"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "lambda:InvokeFunction"
                    ],
                    "Resource": [
                        "arn:aws:lambda:$AWS_REGION:*:function:chatbot-*"
                    ]
                }
            ]
        }
        EOF
          
          # Create and attach custom policy
          aws iam create-policy \
            --policy-name chatbot-agent-toolkit-policy \
            --policy-document file://lambda-policy.json
          
          aws iam attach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/chatbot-agent-toolkit-policy
          
          # Clean up
          rm trust-policy.json lambda-policy.json
        else
          echo "IAM role already exists"
        fi

    - name: Deploy Lambda function
      run: |
        ROLE_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/chatbot-agent-toolkit-role"
        IMAGE_URI="${{ steps.build-image.outputs.image }}"
        
        # Check if function exists
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --region $AWS_REGION &> /dev/null; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $IMAGE_URI \
            --region $AWS_REGION
          
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --timeout 900 \
            --memory-size 3008 \
            --environment Variables="{
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},
              PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }},
              PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }},
              PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }},
              NEO4J_URI=${{ secrets.NEO4J_URI }},
              NEO4J_USER=${{ secrets.NEO4J_USER }},
              NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }},
              AWS_REGION=$AWS_REGION,
              DOCUMENTS_BUCKET=chatbot-documents-ap-south-1,
              EMBEDDINGS_BUCKET=chatbot-embeddings-ap-south-1,
              KNOWLEDGE_BASE_TABLE=chatbot-knowledge-base,
              METADATA_TABLE=chatbot-knowledge-base-metadata,
              CONVERSATIONS_TABLE=chatbot-conversations
            }" \
            --region $AWS_REGION
        else
          echo "Creating new Lambda function..."
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --package-type Image \
            --code ImageUri=$IMAGE_URI \
            --role $ROLE_ARN \
            --timeout 900 \
            --memory-size 3008 \
            --environment Variables="{
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},
              PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }},
              PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }},
              PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }},
              NEO4J_URI=${{ secrets.NEO4J_URI }},
              NEO4J_USER=${{ secrets.NEO4J_USER }},
              NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }},
              AWS_REGION=$AWS_REGION,
              DOCUMENTS_BUCKET=chatbot-documents-ap-south-1,
              EMBEDDINGS_BUCKET=chatbot-embeddings-ap-south-1,
              KNOWLEDGE_BASE_TABLE=chatbot-knowledge-base,
              METADATA_TABLE=chatbot-knowledge-base-metadata,
              CONVERSATIONS_TABLE=chatbot-conversations
            }" \
            --region $AWS_REGION
        fi

    - name: Setup S3 trigger
      run: |
        S3_BUCKET_ARN="arn:aws:s3:::chatbot-documents-ap-south-1"
        
        # Add Lambda permission for S3
        aws lambda add-permission \
          --function-name $LAMBDA_FUNCTION_NAME \
          --statement-id s3-trigger-$(date +%s) \
          --action lambda:InvokeFunction \
          --principal s3.amazonaws.com \
          --source-arn $S3_BUCKET_ARN \
          --region $AWS_REGION || true
        
        # Configure S3 bucket notification
        cat > s3-notification.json << EOF
        {
            "LambdaConfigurations": [
                {
                    "Id": "DocumentIngestionTrigger",
                    "LambdaFunctionArn": "arn:aws:lambda:$AWS_REGION:$(aws sts get-caller-identity --query Account --output text):function:$LAMBDA_FUNCTION_NAME",
                    "Events": ["s3:ObjectCreated:*"],
                    "Filter": {
                        "Key": {
                            "FilterRules": [
                                {
                                    "Name": "prefix",
                                    "Value": "documents/"
                                },
                                {
                                    "Name": "suffix",
                                    "Value": ".pdf"
                                }
                            ]
                        }
                    }
                }
            ]
        }
        EOF
        
        aws s3api put-bucket-notification-configuration \
          --bucket chatbot-documents-ap-south-1 \
          --notification-configuration file://s3-notification.json \
          --region $AWS_REGION
        
        rm s3-notification.json

    - name: Setup API Gateway
      run: |
        API_NAME="chatbot-agent-toolkit-api"
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$API_NAME'].id" --output text --region $AWS_REGION)
        
        if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
          echo "Creating API Gateway..."
          
          # Create REST API
          API_ID=$(aws apigateway create-rest-api \
            --name $API_NAME \
            --description "API Gateway for Chatbot Agent Toolkit" \
            --region $AWS_REGION \
            --query 'id' \
            --output text)
          
          # Get root resource ID
          ROOT_RESOURCE_ID=$(aws apigateway get-resources \
            --rest-api-id $API_ID \
            --region $AWS_REGION \
            --query 'items[0].id' \
            --output text)
          
          # Create /retrieve resource
          RETRIEVE_RESOURCE_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_RESOURCE_ID \
            --path-part retrieve \
            --region $AWS_REGION \
            --query 'id' \
            --output text)
          
          # Create POST method
          aws apigateway put-method \
            --rest-api-id $API_ID \
            --resource-id $RETRIEVE_RESOURCE_ID \
            --http-method POST \
            --authorization-type NONE \
            --region $AWS_REGION
          
          # Set up Lambda integration
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $RETRIEVE_RESOURCE_ID \
            --http-method POST \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/arn:aws:lambda:$AWS_REGION:$(aws sts get-caller-identity --query Account --output text):function:$LAMBDA_FUNCTION_NAME/invocations" \
            --region $AWS_REGION
          
          # Deploy API
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod \
            --region $AWS_REGION
          
          echo "API Gateway created successfully"
        else
          echo "API Gateway already exists"
        fi

    - name: Output deployment information
      run: |
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='chatbot-agent-toolkit-api'].id" --output text --region $AWS_REGION)
        API_URL="https://${API_ID}.execute-api.${AWS_REGION}.amazonaws.com/prod"
        
        echo "::notice title=Deployment Complete::Lambda Function: $LAMBDA_FUNCTION_NAME"
        echo "::notice title=API Gateway::URL: $API_URL/retrieve"
        echo "::notice title=ECR Repository::Repository: $ECR_REPOSITORY"
