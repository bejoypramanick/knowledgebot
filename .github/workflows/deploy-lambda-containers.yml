name: Deploy Lambda Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/lambda/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/lambda/**'

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 090163643302.dkr.ecr.ap-south-1.amazonaws.com
  RAG_PROCESSOR_IMAGE: chatbot-rag-processor
  CHAT_HANDLER_IMAGE: chatbot-chat-handler

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push RAG Processor image
      env:
        ECR_REPOSITORY: ${{ env.RAG_PROCESSOR_IMAGE }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
        # Build and push image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/lambda/rag-processor
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build and push Chat Handler image
      env:
        ECR_REPOSITORY: ${{ env.CHAT_HANDLER_IMAGE }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
        # Build and push image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/lambda/chat-handler
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy RAG Processor Lambda
      env:
        ECR_REPOSITORY: ${{ env.RAG_PROCESSOR_IMAGE }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Check if Lambda function exists
        if aws lambda get-function --function-name $ECR_REPOSITORY --region $AWS_REGION > /dev/null 2>&1; then
          # Update existing function
          aws lambda update-function-code \
            --function-name $ECR_REPOSITORY \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --region $AWS_REGION
        else
          # Create new function
          aws lambda create-function \
            --function-name $ECR_REPOSITORY \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role arn:aws:iam::090163643302:role/chatbot-lambda-role \
            --timeout 900 \
            --memory-size 2048 \
            --region $AWS_REGION
        fi

    - name: Deploy Chat Handler Lambda
      env:
        ECR_REPOSITORY: ${{ env.CHAT_HANDLER_IMAGE }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Check if Lambda function exists
        if aws lambda get-function --function-name $ECR_REPOSITORY --region $AWS_REGION > /dev/null 2>&1; then
          # Update existing function
          aws lambda update-function-code \
            --function-name $ECR_REPOSITORY \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --region $AWS_REGION
        else
          # Create new function
          aws lambda create-function \
            --function-name $ECR_REPOSITORY \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role arn:aws:iam::090163643302:role/chatbot-lambda-role \
            --timeout 300 \
            --memory-size 1024 \
            --region $AWS_REGION
        fi

    - name: Configure S3 Event Trigger
      run: |
        # Get the RAG processor Lambda function ARN
        RAG_ARN=$(aws lambda get-function --function-name $RAG_PROCESSOR_IMAGE --region $AWS_REGION --query 'Configuration.FunctionArn' --output text)
        
        # Add permission for S3 to invoke Lambda
        aws lambda add-permission \
          --function-name $RAG_PROCESSOR_IMAGE \
          --statement-id s3-trigger-permission \
          --action lambda:InvokeFunction \
          --principal s3.amazonaws.com \
          --source-arn arn:aws:s3:::chatbot-documents-ap-south-1 \
          --region $AWS_REGION || echo "Permission already exists"
        
        # Create S3 event notification configuration
        aws s3api put-bucket-notification-configuration \
          --bucket chatbot-documents-ap-south-1 \
          --notification-configuration '{
            "LambdaConfigurations": [
              {
                "Id": "rag-processor-trigger",
                "LambdaFunctionArn": "'$RAG_ARN'",
                "Events": ["s3:ObjectCreated:Put"],
                "Filter": {
                  "Key": {
                    "FilterRules": [
                      {
                        "Name": "prefix",
                        "Value": "documents/"
                      }
                    ]
                  }
                }
              }
            ]
          }' \
          --region $AWS_REGION

    - name: Set Lambda Environment Variables
      run: |
        # Set environment variables for RAG Processor
        aws lambda update-function-configuration \
          --function-name $RAG_PROCESSOR_IMAGE \
          --environment Variables='{
            "DOCUMENTS_BUCKET": "chatbot-documents-ap-south-1",
            "EMBEDDINGS_BUCKET": "chatbot-embeddings-ap-south-1",
            "KNOWLEDGE_BASE_TABLE": "chatbot-knowledge-base",
            "CLAUDE_API_KEY": "${{ secrets.CLAUDE_API_KEY }}"
          }' \
          --region $AWS_REGION
        
        # Set environment variables for Chat Handler
        aws lambda update-function-configuration \
          --function-name $CHAT_HANDLER_IMAGE \
          --environment Variables='{
            "DOCUMENTS_BUCKET": "chatbot-documents-ap-south-1",
            "KNOWLEDGE_BASE_TABLE": "chatbot-knowledge-base",
            "CONVERSATIONS_TABLE": "chatbot-conversations",
            "CLAUDE_API_KEY": "${{ secrets.CLAUDE_API_KEY }}",
            "RAG_PROCESSOR_LAMBDA": "chatbot-rag-processor"
          }' \
          --region $AWS_REGION

    - name: Output deployment information
      run: |
        echo "âœ… Deployment completed successfully!"
        echo "RAG Processor Lambda: $ECR_REGISTRY/$RAG_PROCESSOR_IMAGE:${{ github.sha }}"
        echo "Chat Handler Lambda: $ECR_REGISTRY/$CHAT_HANDLER_IMAGE:${{ github.sha }}"
        echo ""
        echo "Next steps:"
        echo "1. Update API Gateway integration to use the new Chat Handler Lambda"
        echo "2. Test document upload and chat functionality"
        echo "3. Monitor CloudWatch logs for any issues"
